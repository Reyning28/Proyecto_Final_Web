@page "/"
@page "/login"
@using Digesett.Services
@inject IAgentService AgentService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="login-container">
    <div class="login-box">
        <h3>DIGESETT - Acceso de Agentes</h3>

        <!-- Campo para ingresar la cédula (nombre de usuario) -->
        <div>
            <label for="cedula">Cédula:</label>
            <input id="cedula" type="text" @bind="cedula" class="form-control" />
        </div>

        <!-- Campo para ingresar la contraseña -->
        <div>
            <label for="password">Contraseña:</label>
            <input id="password" type="password" @bind="password" class="form-control" />
        </div>

        <!-- Mostrar el mensaje de error si existe alguno -->
        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        <!-- Indicador de carga personalizado (si está cargando) -->
        @if (isLoading)
        {
            <div class="loading-container">
                <img src="/Images/loading.gif" alt="Cargando..." class="loading-spinner" />
            </div>
        }

        <!-- Botón para iniciar sesión -->
        <button class="btn btn-primary" @onclick="HandleLogin" disabled="@isLoading">
            Iniciar Sesión
        </button>
    </div>
</div>

<style>
    .login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh; /* Centra verticalmente */
    background-color: #f8f9fa; /* Fondo claro */
}

.login-box {
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #fff;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    width: 300px; /* Ajusta el ancho del formulario */
}

.form-control {
    width: 100%;
    padding: 5px; /* Reduce el relleno interno */
    font-size: 14px; /* Tamaño de fuente más pequeño */
    margin-bottom: 15px; /* Espaciado entre inputs */
    border: 1px solid #ccc; /* Bordes suaves */
    border-radius: 4px;
}

h3 {
    margin-bottom: 20px;
    text-align: center;
    color: #333;
}

.btn-primary {
    width: 100%; /* Botón del ancho completo */
    padding: 10px;
    font-size: 14px;
    background-color: #0562c5; /* Color del botón */
    color: white;             /* Color del texto */
    border: none;             /* Sin bordes */
    border-radius: 5px;       /* Bordes redondeados */
    cursor: pointer;          /* Cambiar a mano al pasar el cursor */
    transition: transform 0.3s ease, background-color 0.3s ease; /* Efecto suave */
}

.btn-primary:hover {
    transform: scale(1.1); /* Agranda el botón un 10% */
    background-color: #1074df; /* Cambiar el color del fondo */
}
.alert-danger {
margin-top: 20px; /* Espaciado hacia abajo del panel */
    color: rgb(255, 255, 255); /* Color del texto */
    background-color: #ea0606; /* Fondo rojo */
    padding: 10px 15px; /* Espaciado interno */
    border-radius: 5px; /* Bordes redondeados */
    text-align: center; /* Centrar el texto */
    font-weight: bold; /* Texto en negrita */
    max-width: 300px; /* Ajustar el ancho máximo */
    margin-left: auto; /* Centrar el mensaje */
    margin-right: auto; /* Centrar el mensaje */
}
</style>

@code {
    private string cedula = string.Empty;
    private string password = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = false; // Variable para gestionar el estado de carga

    private async Task HandleLogin()
    {
        errorMessage = string.Empty; // Reseteamos el mensaje de error antes de hacer la validación

        // Validación básica para asegurarnos de que ambos campos (cedula y contraseña) no estén vacíos
        if (string.IsNullOrWhiteSpace(cedula) || string.IsNullOrWhiteSpace(password))
        {
            SetErrorMessage("Por favor, complete todos los campos.");
            return; // Si los campos están vacíos, terminamos la ejecución aquí
        }

        isLoading = true; // Activamos el indicador de carga

        try
        {
            // Intentamos autenticar al agente usando el servicio de login
            var agent = await AgentService.LoginAsync(cedula, password);

            // Si la autenticación es exitosa, redirigimos a la página de registro de multas
            if (agent != null)
            {
                NavigationManager.NavigateTo("/registro-multa");
            }
            else
            {
                // Si las credenciales son inválidas, mostramos un mensaje de error
                SetErrorMessage("Credenciales inválidas.");
            }
        }
        catch
        {
            // Si ocurre un error en el proceso de autenticación (por ejemplo, problemas de conexión), mostramos un mensaje general
            SetErrorMessage("Error al iniciar sesión. Inténtelo más tarde.");
        }
        finally
        {
            isLoading = false; // Desactivamos el indicador de carga una vez terminado el proceso
        }
    }

    private void SetErrorMessage(string message)
    {
        errorMessage = message;
    }
}