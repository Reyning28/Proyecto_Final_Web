<!--"/login/administrativo"-->
@using Digesett.Services
@inject IAgentService AgentService
@inject SessionService SessionService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="login-container">
    <div class="login-box">
        <h3>DIGESETT - Acceso de Agentes</h3>

        <!-- Campo para ingresar el nombre de usuario -->
        <div>
            <label for="name">Nombre:</label>
            <input id="name" type="text" @bind="name" class="form-control" />
        </div>

        <!-- Campo para ingresar la contraseña -->
        <div>
            <label for="password">Contraseña:</label>
            <input id="password" type="password" @bind="password" class="form-control" />
        </div>

        <!-- Mostrar el mensaje de error si existe alguno -->
        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        <!-- Indicador de carga personalizado (si está cargando) -->
        @if (isLoading)
        {
            <div class="loading-container">
                <img src="/Images/loading.gif" alt="Cargando..." class="loading-spinner" />
            </div>
        }

        <!-- Botón para iniciar sesión -->
        <button class="btn btn-primary" @onclick="HandleLogin" disabled="@isLoading">
            Iniciar Sesión
        </button>
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f8f9fa;
    }

    .login-box {
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 300px;
    }

    .form-control {
        width: 100%;
        padding: 5px;
        font-size: 14px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    h3 {
        margin-bottom: 20px;
        text-align: center;
        color: #333;
    }

    .btn-primary {
        width: 100%;
        padding: 10px;
        font-size: 14px;
        background-color: #0562c5;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: transform 0.3s ease, background-color 0.3s ease;
    }

    .btn-primary:hover {
        transform: scale(1.1);
        background-color: #1074df;
    }

    .alert-danger {
        margin-top: 20px;
        color: white;
        background-color: #ea0606;
        padding: 10px 15px;
        border-radius: 5px;
        text-align: center;
        font-weight: bold;
        max-width: 300px;
        margin-left: auto;
        margin-right: auto;
    }
</style>

@code {
    private string name = string.Empty;
    private string password = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;

            // Llamar al servicio de agentes para autenticar al agente con el nombre y contraseña ingresados
            var agent =  await AgentService.LoginAsyncSuperUser(name, password);

            if (agent != null)
            {
                // Establecer la información del agente en el SessionService
                await Task.Delay(1000); // Simula el tiempo de carga
                SessionService.SetCurrentAgent(agent.Id.ToString(), agent.Name);
                NavigationManager.NavigateTo("/login/administrativo");
            }
            else
            {
                errorMessage = "Credenciales inválidas";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error al iniciar sesión";
        }
        finally
        {
            isLoading = false;
        }
    }
}