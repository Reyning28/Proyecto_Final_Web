@page "/modulo2/mapa-multas-central"
@using Digesett.Services
@using Digesett.Models
@inject IAgentService AgentService
@inject SessionService SessionService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (!SessionService.IsAuthenticated)
{
    <div class="alert alert-warning text-center">
        <i class="fas fa-exclamation-triangle"></i>
        Debe iniciar sesi√≥n para acceder a esta p√°gina.
    </div>
    return;
}

<div class="mapa-container">
    <h2>Mapa de Multas üó∫Ô∏è</h2>

    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <select class="form-select" @bind="selectedMonth">
                    @for (int i = 1; i <= 12; i++)
                    {
                        <option value="@i">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i)</option>
                    }
                </select>
                <select class="form-select" @bind="selectedYear">
                    @for (int year = DateTime.Now.Year; year >= 2020; year--)
                    {
                        <option value="@year">@year</option>
                    }
                </select>
                <button class="btn btn-primary" @onclick="BuscarMultas">
                    <i class="fas fa-search"></i> Buscar Multas
                </button>
                @if (mostrarMapa)
                {
                    <button class="btn btn-secondary" @onclick="LimpiarMapa">
                        <i class="fas fa-broom"></i> Limpiar Mapa
                    </button>
                }
            </div>
        </div>
    </div>

    @if (mostrarMapa)
    {
        <div id="map" class="map"></div>
    }
    else
    {
        <div class="alert alert-info text-center">
            <i class="fas fa-info-circle"></i>
            Seleccione un mes y a√±o, y haga clic en "Buscar Multas" para ver el mapa.
        </div>
    }
</div>

<style>
    .mapa-container {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .map {
        height: 600px;
        width: 100%;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    h2 {
        margin-bottom: 20px;
        color: #333;
    }

    .input-group {
        margin-bottom: 20px;
        gap: 8px;
        flex-wrap: nowrap;
    }

    .form-select {
        max-width: 200px;
        flex: 0 0 auto;
    }

    .btn {
        display: flex;
        align-items: center;
        gap: 8px;
        white-space: nowrap;
    }

    .btn i {
        font-size: 14px;
    }

    .btn-secondary {
        margin-left: 8px;
    }

    .alert {
        padding: 2rem;
        border-radius: 8px;
        font-size: 1.1rem;
    }

    .alert i {
        margin-right: 10px;
        font-size: 1.2rem;
    }
</style>

@code {
    private int selectedMonth = DateTime.Now.Month;
    private int selectedYear = DateTime.Now.Year;
    private bool mostrarMapa = false;

    protected override void OnInitialized()
    {
        if (!SessionService.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login", true);
        }
    }

    private async Task LimpiarMapa()
    {
        mostrarMapa = false;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("cleanupMap");
    }

    private async Task BuscarMultas()
    {
        try
        {
            // Primero limpiamos el mapa si existe
            if (mostrarMapa)
            {
                await JSRuntime.InvokeVoidAsync("cleanupMap");
            }

            // Obtener el ID del agente de la sesi√≥n
            string agentId = SessionService.CurrentAgentId;

            // Obtener las multas filtradas por mes y a√±o
            var multas = await AgentService.GetAgentFinesByMonthAndYearAsync(agentId, selectedMonth, selectedYear);

            // Solo mostrar el mapa si hay multas
            mostrarMapa = true;
            StateHasChanged();

            // Esperar a que el DOM se actualice
            await Task.Delay(100);

            // Inicializar el mapa con las multas filtradas
            await JSRuntime.InvokeVoidAsync("initializeMap", multas);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar las multas: {ex.Message}");
        }
    }
}